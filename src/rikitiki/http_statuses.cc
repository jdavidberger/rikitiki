#include "http_statuses.h"

namespace rikitiki {    
  const HttpStatus HttpStatus::Continue(100, "Continue ");
  const HttpStatus HttpStatus::Switching_Protocols(101, "Switching Protocols ");
  const HttpStatus HttpStatus::Processing (102, "Processing ");
  const HttpStatus HttpStatus::OK (200, "OK ");
  const HttpStatus HttpStatus::Created (201, "Created ");
  const HttpStatus HttpStatus::Accepted (202, "Accepted ");
  const HttpStatus HttpStatus::Non_Authoritative_Information (203, "Non-Authoritative Information ");
  const HttpStatus HttpStatus::No_Content (204, "No Content ");
  const HttpStatus HttpStatus::Reset_Content (205, "Reset Content ");
  const HttpStatus HttpStatus::Partial_Content (206, "Partial Content ");
  const HttpStatus HttpStatus::Multi_Status (207, "Multi-Status ");
  const HttpStatus HttpStatus::Already_Reported (208, "Already Reported ");
  const HttpStatus HttpStatus::IM_Used (226, "IM Used ");
  const HttpStatus HttpStatus::Multiple_Choices (300, "Multiple Choices ");
  const HttpStatus HttpStatus::Moved_Permanently (301, "Moved Permanently ");
  const HttpStatus HttpStatus::Found(302, "Found ");
  const HttpStatus HttpStatus::See_Other (303, "See Other ");
  const HttpStatus HttpStatus::Not_Modified (304, "Not Modified ");
  const HttpStatus HttpStatus::Use_Proxy (305, "Use Proxy ");
  const HttpStatus HttpStatus::Switch_Proxy (306, "Switch Proxy ");
  const HttpStatus HttpStatus::Temporary_Redirect (307, "Temporary Redirect ");
  const HttpStatus HttpStatus::Permanent_Redirect (308, "Permanent Redirect ");
  const HttpStatus HttpStatus::Bad_Request (400, "Bad Request ");
  const HttpStatus HttpStatus::Unauthorized (401, "Unauthorized ");
  const HttpStatus HttpStatus::Payment_Required (402, "Payment Required ");
  const HttpStatus HttpStatus::Forbidden (403, "Forbidden ");
  const HttpStatus HttpStatus::Not_Found (404, "Not Found ");
  const HttpStatus HttpStatus::Method_Not_Allowed (405, "Method Not Allowed ");
  const HttpStatus HttpStatus::Not_Acceptable (406, "Not Acceptable ");
  const HttpStatus HttpStatus::Proxy_Authentication_Required (407, "Proxy Authentication Required ");
  const HttpStatus HttpStatus::Request_Timeout (408, "Request Timeout ");
  const HttpStatus HttpStatus::Conflict (409, "Conflict ");
  const HttpStatus HttpStatus::Gone (410, "Gone ");
  const HttpStatus HttpStatus::Length_Required (411, "Length Required ");
  const HttpStatus HttpStatus::Precondition_Failed (412, "Precondition Failed ");
  const HttpStatus HttpStatus::Request_Entity_Too_Large (413, "Request Entity Too Large ");
  const HttpStatus HttpStatus::Request_URI_Too_Long (414, "Request-URI Too Long ");
  const HttpStatus HttpStatus::Unsupported_Media_Type (415, "Unsupported Media Type ");
  const HttpStatus HttpStatus::Requested_Range_Not_Satisfiable (416, "Requested Range Not Satisfiable ");
  const HttpStatus HttpStatus::Expectation_Failed (417, "Expectation Failed ");
  const HttpStatus HttpStatus::Im_a_teapot (418, "I'm a teapot ");
  const HttpStatus HttpStatus::Enhance_Your_Calm (420, "Enhance Your Calm ");
  const HttpStatus HttpStatus::Unprocessable_Entity (422, "Unprocessable Entity ");
  const HttpStatus HttpStatus::Locked(423, "Locked ");
  const HttpStatus HttpStatus::Failed_Dependency (424, "Failed Dependency ");
  const HttpStatus HttpStatus::Unordered_Collection (425, "Unordered Collection ");
  const HttpStatus HttpStatus::Upgrade_Required (426, "Upgrade Required ");
  const HttpStatus HttpStatus::Precondition_Required (428, "Precondition Required ");
  const HttpStatus HttpStatus::Too_Many_Requests (429, "Too Many Requests ");
  const HttpStatus HttpStatus::Request_Header_Fields_Too_Large (431, "Request Header Fields Too Large ");
  const HttpStatus HttpStatus::No_Response (444, "No Response ");
  const HttpStatus HttpStatus::Retry_With (449, "Retry With ");
  const HttpStatus HttpStatus::Blocked_by_Windows_Parental_Controls (450, "Blocked by Windows Parental Controls ");
  const HttpStatus HttpStatus::Client_Closed_Request (499, "Client Closed Request ");
  const HttpStatus HttpStatus::Internal_Server_Error (500, "Internal Server Error ");
  const HttpStatus HttpStatus::Not_Implemented (501, "Not Implemented ");
  const HttpStatus HttpStatus::Bad_Gateway (502, "Bad Gateway ");
  const HttpStatus HttpStatus::Service_Unavailable (503, "Service Unavailable ");
  const HttpStatus HttpStatus::Gateway_Timeout (504, "Gateway Timeout ");
  const HttpStatus HttpStatus::HTTP_Version_Not_Supported (505, "HTTP Version Not Supported ");
  const HttpStatus HttpStatus::Variant_Also_Negotiates (506, "Variant Also Negotiates ");
  const HttpStatus HttpStatus::Insufficient_Storage (507, "Insufficient Storage ");
  const HttpStatus HttpStatus::Bandwidth_Limit_Exceeded (509, "Bandwidth Limit Exceeded ");
  const HttpStatus HttpStatus::Not_Extended(510, "Not Extended");    
}
